import React, { useState, useEffect } from "react";
import {
  Text,
  Center,
  Image,
  Card,
  CardHeader,
  Heading,
  CardBody,
  Flex,
  Box,
} from "@chakra-ui/react";
import styles from "./MySidebar.module.css";

const MySidebar = ({ isSidebarOpen, toggleSidebar, onWeatherInfoClick }) => {
  const [city, setCity] = useState("");
  const [weatherInfo, setWeatherInfo] = useState(null);
  const apiKey = process.env.REACT_APP_OPENWEATHER_API_KEY;

  useEffect(() => {
    let debounceTimeout;

    const fetchData = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ city –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
        if (!city) {
          setWeatherInfo(null); // –û—á–∏—â–∞–µ–º weatherInfo, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenWeather API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        console.log(city);
        console.log(apiKey);
        const response = await fetch(
          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`
        );

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();

        if (data.cod && data.cod !== 200) {
          throw new Error(
            `OpenWeather API error! Code: ${data.cod}, Message: ${data.message}`
          );
        }

        setWeatherInfo(data);

        console.log("newAPI Response:", data);
        // console.log("WeatherInfo:", weatherInfo);
      } catch (error) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        console.error("API Request Error:", error);
      }
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º debounce –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetchData –Ω–∞ 500 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
    clearTimeout(debounceTimeout);
    debounceTimeout = setTimeout(() => {
      fetchData();
    }, 500);

    // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤–≤–æ–¥–∞
    return () => {
      clearTimeout(debounceTimeout);
    };
  }, [city, apiKey]);

  const roundedTemp = weatherInfo ? Math.round(weatherInfo.main.temp) : null; // –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ temp –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
  const roundedMinTemp = weatherInfo
    ? Math.round(weatherInfo.main.temp_min)
    : null;
  const roundedMaxTemp = weatherInfo
    ? Math.round(weatherInfo.main.temp_max)
    : null;

  const handleWeatherInfoClick = () => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –æ–∫–æ—à–∫–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∞–π—Ç–∞
    if (weatherInfo) {
      onWeatherInfoClick(weatherInfo);
    }
  };

  const handleCloseWeatherCard = () => {
    setWeatherInfo(null);
    setCity("");
  };

  return (
    // <div
    //   className={
    //     isSidebarOpen ? `${styles.sidebar} ${styles.open}` : styles.sidebar
    //   }
    // >
    // <div className={`${styles.sidebar} ${isSidebarOpen ? styles.open : ""}`}>
    <div>
      {isSidebarOpen ? (
        <>
          <div
            className={`${styles.crossIcon} ${styles.visible}`}
            onClick={toggleSidebar}
          >
            ‚úï
          </div>
          <Heading as="h3" size="xl" ml={5} mb={3} color="white">
            Weather
          </Heading>
          <div className={styles.menu}>
            <input
              type="text"
              placeholder="üîç  Search for a city or airport"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              style={{ width: "100%", paddingLeft: "5px" }}
            />
            {weatherInfo && (
              <div
                className={styles.weatherInfo}
                onClick={handleWeatherInfoClick}
              >
                <Center>
                  <Card color={"white"} bgColor={"gray.400"} w={"210px"} pb={2}>
                    {/* –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫—Ä–µ—Å—Ç–∏–∫–∞ */}
                    <div
                      className={styles.closeIconContainer}
                      onClick={handleCloseWeatherCard}
                    >
                      ‚úï
                    </div>
                    <CardHeader py={0} pl={2}>
                      <Flex justify={"space-between"} align={"center"} gap={3}>
                        <Heading as="h4" size="md">
                          {weatherInfo.name}
                        </Heading>
                        <Image
                          boxSize="40px"
                          src={`https://openweathermap.org/img/wn/${weatherInfo.weather[0].icon}.png`}
                          alt="Weather Icon"
                          objectFit="cover"
                        />
                        <Text fontSize="3xl">{roundedTemp}¬∞</Text>
                      </Flex>
                    </CardHeader>
                    <CardBody py={4} pl={2}></CardBody>
                    <Box px={2} w={"100%"}>
                      <Flex justify={"space-between"}>
                        <Text>{weatherInfo.weather[0].description}</Text>
                        <Text fontSize={"md"}>
                          L:{roundedMinTemp}¬∞ H:{roundedMaxTemp}¬∞
                        </Text>
                      </Flex>
                    </Box>
                  </Card>
                </Center>
              </div>
            )}
          </div>
        </>
      ) : (
        <div className={styles.hamburgerIcon} onClick={toggleSidebar}>
          ‚ò∞
        </div>
      )}
    </div>
  );
};

export default MySidebar;
